#include <stdio.h>

void input_matrix(int rows, int cols, int matrix[rows][cols]) {
    printf("Enter the elements of the matrix row by row:\n");
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            scanf("%d", &matrix[i][j]);
        }
    }
}

void output_matrix(int rows, int cols, int matrix[rows][cols]) {
    printf("The matrix is:\n");
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            printf("%d\t", matrix[i][j]);
        }
        printf("\n");
    }
}

// a) Matrix Addition
void matrix_addition(int rows, int cols, int mat1[rows][cols], int mat2[rows][cols], int result[rows][cols]) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            result[i][j] = mat1[i][j] + mat2[i][j];
        }
    }
}

// b) Matrix Multiplication
void matrix_multiplication(int rows1, int cols1, int mat1[rows1][cols1], int rows2, int cols2, int mat2[rows2][cols2], int result[rows1][cols2]) {
    for (int i = 0; i < rows1; i++) {
        for (int j = 0; j < cols2; j++) {
            result[i][j] = 0;  // Initialize result element
            for (int k = 0; k < cols1; k++) {
                result[i][j] += mat1[i][k] * mat2[k][j];
            }
        }
    }
}

// c) Matrix Transpose
void matrix_transpose(int rows, int cols, int matrix[rows][cols], int transpose[cols][rows]) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            transpose[j][i] = matrix[i][j];
        }
    }
}

// d) Convert Matrix to Unit Matrix
void convert_to_unit_matrix(int size, int matrix[size][size]) {
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            if (i == j) {
                matrix[i][j] = 1;  // Diagonal elements are 1
            } else {
                matrix[i][j] = 0;  // All other elements are 0
            }
        }
    }
}

// e) Show Sparse Matrix
void show_sparse_matrix(int rows, int cols, int matrix[rows][cols]) {
    printf("Sparse Matrix Representation (Non-zero elements):\n");
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            if (matrix[i][j] != 0) {
                printf("Row %d, Column %d: %d\n", i + 1, j + 1, matrix[i][j]);
            }
        }
    }
}

int main() {
    int rows1, cols1, rows2, cols2;
    
    // Input matrices
    printf("Enter number of rows and columns for matrix 1: ");
    scanf("%d %d", &rows1, &cols1);
    int mat1[rows1][cols1];
    input_matrix(rows1, cols1, mat1);
    
    printf("Enter number of rows and columns for matrix 2: ");
    scanf("%d %d", &rows2, &cols2);
    int mat2[rows2][cols2];
    input_matrix(rows2, cols2, mat2);
    
    // Matrix Addition (only if sizes match)
    if (rows1 == rows2 && cols1 == cols2) {
        int add_result[rows1][cols1];
        matrix_addition(rows1, cols1, mat1, mat2, add_result);
        printf("Matrix Addition Result:\n");
        output_matrix(rows1, cols1, add_result);
    } else {
        printf("Matrix sizes do not match for addition.\n");
    }
    
    // Matrix Multiplication (only if valid)
    if (cols1 == rows2) {
        int mul_result[rows1][cols2];
        matrix_multiplication(rows1, cols1, mat1, rows2, cols2, mat2, mul_result);
        printf("Matrix Multiplication Result:\n");
        output_matrix(rows1, cols2, mul_result);
    } else {
        printf("Matrix sizes do not match for multiplication.\n");
    }
    
    // Matrix Transpose
    int transpose[cols1][rows1];
    matrix_transpose(rows1, cols1, mat1, transpose);
    printf("Transpose of Matrix 1:\n");
    output_matrix(cols1, rows1, transpose);
    
    // Convert to Unit Matrix
    int unit_size;
    printf("Enter the size for Unit Matrix: ");
    scanf("%d", &unit_size);
    int unit_matrix[unit_size][unit_size];
    convert_to_unit_matrix(unit_size, unit_matrix);
    printf("Unit Matrix (Identity Matrix):\n");
    output_matrix(unit_size, unit_size, unit_matrix);
    
    // Show Sparse Matrix
    show_sparse_matrix(rows1, cols1, mat1);

    return 0;
}
